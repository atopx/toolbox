// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: public/service.proto

package public_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicService_ListLabel_FullMethodName          = "/public_service.PublicService/ListLabel"
	PublicService_OperateLabel_FullMethodName       = "/public_service.PublicService/OperateLabel"
	PublicService_BatchOperateLabel_FullMethodName  = "/public_service.PublicService/BatchOperateLabel"
	PublicService_ListFolder_FullMethodName         = "/public_service.PublicService/ListFolder"
	PublicService_OperateFolder_FullMethodName      = "/public_service.PublicService/OperateFolder"
	PublicService_BatchOperateFolder_FullMethodName = "/public_service.PublicService/BatchOperateFolder"
	PublicService_Transfer_FullMethodName           = "/public_service.PublicService/Transfer"
)

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicServiceClient interface {
	// 标签
	ListLabel(ctx context.Context, in *ListLabelParams, opts ...grpc.CallOption) (*ListLabelReply, error)
	OperateLabel(ctx context.Context, in *OperateLabelParams, opts ...grpc.CallOption) (*OperateLabelReply, error)
	BatchOperateLabel(ctx context.Context, in *BatchOperateLabelParams, opts ...grpc.CallOption) (*BatchOperateLabelReply, error)
	// 文件夹
	ListFolder(ctx context.Context, in *ListFolderParams, opts ...grpc.CallOption) (*ListFolderReply, error)
	OperateFolder(ctx context.Context, in *OperateFolderParams, opts ...grpc.CallOption) (*OperateFolderReply, error)
	BatchOperateFolder(ctx context.Context, in *BatchOperateFolderParams, opts ...grpc.CallOption) (*BatchOperateFolderReply, error)
	// 工具类
	Transfer(ctx context.Context, in *TransferParams, opts ...grpc.CallOption) (*TransferReply, error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) ListLabel(ctx context.Context, in *ListLabelParams, opts ...grpc.CallOption) (*ListLabelReply, error) {
	out := new(ListLabelReply)
	err := c.cc.Invoke(ctx, PublicService_ListLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) OperateLabel(ctx context.Context, in *OperateLabelParams, opts ...grpc.CallOption) (*OperateLabelReply, error) {
	out := new(OperateLabelReply)
	err := c.cc.Invoke(ctx, PublicService_OperateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) BatchOperateLabel(ctx context.Context, in *BatchOperateLabelParams, opts ...grpc.CallOption) (*BatchOperateLabelReply, error) {
	out := new(BatchOperateLabelReply)
	err := c.cc.Invoke(ctx, PublicService_BatchOperateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) ListFolder(ctx context.Context, in *ListFolderParams, opts ...grpc.CallOption) (*ListFolderReply, error) {
	out := new(ListFolderReply)
	err := c.cc.Invoke(ctx, PublicService_ListFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) OperateFolder(ctx context.Context, in *OperateFolderParams, opts ...grpc.CallOption) (*OperateFolderReply, error) {
	out := new(OperateFolderReply)
	err := c.cc.Invoke(ctx, PublicService_OperateFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) BatchOperateFolder(ctx context.Context, in *BatchOperateFolderParams, opts ...grpc.CallOption) (*BatchOperateFolderReply, error) {
	out := new(BatchOperateFolderReply)
	err := c.cc.Invoke(ctx, PublicService_BatchOperateFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) Transfer(ctx context.Context, in *TransferParams, opts ...grpc.CallOption) (*TransferReply, error) {
	out := new(TransferReply)
	err := c.cc.Invoke(ctx, PublicService_Transfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServiceServer is the server API for PublicService service.
// All implementations must embed UnimplementedPublicServiceServer
// for forward compatibility
type PublicServiceServer interface {
	// 标签
	ListLabel(context.Context, *ListLabelParams) (*ListLabelReply, error)
	OperateLabel(context.Context, *OperateLabelParams) (*OperateLabelReply, error)
	BatchOperateLabel(context.Context, *BatchOperateLabelParams) (*BatchOperateLabelReply, error)
	// 文件夹
	ListFolder(context.Context, *ListFolderParams) (*ListFolderReply, error)
	OperateFolder(context.Context, *OperateFolderParams) (*OperateFolderReply, error)
	BatchOperateFolder(context.Context, *BatchOperateFolderParams) (*BatchOperateFolderReply, error)
	// 工具类
	Transfer(context.Context, *TransferParams) (*TransferReply, error)
	mustEmbedUnimplementedPublicServiceServer()
}

// UnimplementedPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicServiceServer struct {
}

func (UnimplementedPublicServiceServer) ListLabel(context.Context, *ListLabelParams) (*ListLabelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabel not implemented")
}
func (UnimplementedPublicServiceServer) OperateLabel(context.Context, *OperateLabelParams) (*OperateLabelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateLabel not implemented")
}
func (UnimplementedPublicServiceServer) BatchOperateLabel(context.Context, *BatchOperateLabelParams) (*BatchOperateLabelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateLabel not implemented")
}
func (UnimplementedPublicServiceServer) ListFolder(context.Context, *ListFolderParams) (*ListFolderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFolder not implemented")
}
func (UnimplementedPublicServiceServer) OperateFolder(context.Context, *OperateFolderParams) (*OperateFolderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateFolder not implemented")
}
func (UnimplementedPublicServiceServer) BatchOperateFolder(context.Context, *BatchOperateFolderParams) (*BatchOperateFolderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateFolder not implemented")
}
func (UnimplementedPublicServiceServer) Transfer(context.Context, *TransferParams) (*TransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedPublicServiceServer) mustEmbedUnimplementedPublicServiceServer() {}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_ListLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ListLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_ListLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ListLabel(ctx, req.(*ListLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_OperateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).OperateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_OperateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).OperateLabel(ctx, req.(*OperateLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_BatchOperateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).BatchOperateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_BatchOperateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).BatchOperateLabel(ctx, req.(*BatchOperateLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_ListFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFolderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ListFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_ListFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ListFolder(ctx, req.(*ListFolderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_OperateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateFolderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).OperateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_OperateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).OperateFolder(ctx, req.(*OperateFolderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_BatchOperateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateFolderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).BatchOperateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_BatchOperateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).BatchOperateFolder(ctx, req.(*BatchOperateFolderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).Transfer(ctx, req.(*TransferParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public_service.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLabel",
			Handler:    _PublicService_ListLabel_Handler,
		},
		{
			MethodName: "OperateLabel",
			Handler:    _PublicService_OperateLabel_Handler,
		},
		{
			MethodName: "BatchOperateLabel",
			Handler:    _PublicService_BatchOperateLabel_Handler,
		},
		{
			MethodName: "ListFolder",
			Handler:    _PublicService_ListFolder_Handler,
		},
		{
			MethodName: "OperateFolder",
			Handler:    _PublicService_OperateFolder_Handler,
		},
		{
			MethodName: "BatchOperateFolder",
			Handler:    _PublicService_BatchOperateFolder_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _PublicService_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/service.proto",
}
