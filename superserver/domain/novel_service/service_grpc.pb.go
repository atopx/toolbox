// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: novel/service.proto

package novel_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NovelService_ListBook_FullMethodName         = "/novel_service.NovelService/ListBook"
	NovelService_OperateBook_FullMethodName      = "/novel_service.NovelService/OperateBook"
	NovelService_BatchOperateBook_FullMethodName = "/novel_service.NovelService/BatchOperateBook"
	NovelService_ListLine_FullMethodName         = "/novel_service.NovelService/ListLine"
	NovelService_OperateLine_FullMethodName      = "/novel_service.NovelService/OperateLine"
	NovelService_BatchOperateLine_FullMethodName = "/novel_service.NovelService/BatchOperateLine"
)

// NovelServiceClient is the client API for NovelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelServiceClient interface {
	ListBook(ctx context.Context, in *ListBookParams, opts ...grpc.CallOption) (*ListBookReply, error)
	OperateBook(ctx context.Context, in *OperateBookParams, opts ...grpc.CallOption) (*OperateBookReply, error)
	BatchOperateBook(ctx context.Context, in *BatchOperateBookParams, opts ...grpc.CallOption) (*BatchOperateBookReply, error)
	ListLine(ctx context.Context, in *ListLineParams, opts ...grpc.CallOption) (*ListLineReply, error)
	OperateLine(ctx context.Context, in *OperateLineParams, opts ...grpc.CallOption) (*OperateLineReply, error)
	BatchOperateLine(ctx context.Context, in *BatchOperateLineParams, opts ...grpc.CallOption) (*BatchOperateLineReply, error)
}

type novelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelServiceClient(cc grpc.ClientConnInterface) NovelServiceClient {
	return &novelServiceClient{cc}
}

func (c *novelServiceClient) ListBook(ctx context.Context, in *ListBookParams, opts ...grpc.CallOption) (*ListBookReply, error) {
	out := new(ListBookReply)
	err := c.cc.Invoke(ctx, NovelService_ListBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) OperateBook(ctx context.Context, in *OperateBookParams, opts ...grpc.CallOption) (*OperateBookReply, error) {
	out := new(OperateBookReply)
	err := c.cc.Invoke(ctx, NovelService_OperateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) BatchOperateBook(ctx context.Context, in *BatchOperateBookParams, opts ...grpc.CallOption) (*BatchOperateBookReply, error) {
	out := new(BatchOperateBookReply)
	err := c.cc.Invoke(ctx, NovelService_BatchOperateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) ListLine(ctx context.Context, in *ListLineParams, opts ...grpc.CallOption) (*ListLineReply, error) {
	out := new(ListLineReply)
	err := c.cc.Invoke(ctx, NovelService_ListLine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) OperateLine(ctx context.Context, in *OperateLineParams, opts ...grpc.CallOption) (*OperateLineReply, error) {
	out := new(OperateLineReply)
	err := c.cc.Invoke(ctx, NovelService_OperateLine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) BatchOperateLine(ctx context.Context, in *BatchOperateLineParams, opts ...grpc.CallOption) (*BatchOperateLineReply, error) {
	out := new(BatchOperateLineReply)
	err := c.cc.Invoke(ctx, NovelService_BatchOperateLine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelServiceServer is the server API for NovelService service.
// All implementations must embed UnimplementedNovelServiceServer
// for forward compatibility
type NovelServiceServer interface {
	ListBook(context.Context, *ListBookParams) (*ListBookReply, error)
	OperateBook(context.Context, *OperateBookParams) (*OperateBookReply, error)
	BatchOperateBook(context.Context, *BatchOperateBookParams) (*BatchOperateBookReply, error)
	ListLine(context.Context, *ListLineParams) (*ListLineReply, error)
	OperateLine(context.Context, *OperateLineParams) (*OperateLineReply, error)
	BatchOperateLine(context.Context, *BatchOperateLineParams) (*BatchOperateLineReply, error)
	mustEmbedUnimplementedNovelServiceServer()
}

// UnimplementedNovelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNovelServiceServer struct {
}

func (UnimplementedNovelServiceServer) ListBook(context.Context, *ListBookParams) (*ListBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBook not implemented")
}
func (UnimplementedNovelServiceServer) OperateBook(context.Context, *OperateBookParams) (*OperateBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateBook not implemented")
}
func (UnimplementedNovelServiceServer) BatchOperateBook(context.Context, *BatchOperateBookParams) (*BatchOperateBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateBook not implemented")
}
func (UnimplementedNovelServiceServer) ListLine(context.Context, *ListLineParams) (*ListLineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLine not implemented")
}
func (UnimplementedNovelServiceServer) OperateLine(context.Context, *OperateLineParams) (*OperateLineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateLine not implemented")
}
func (UnimplementedNovelServiceServer) BatchOperateLine(context.Context, *BatchOperateLineParams) (*BatchOperateLineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateLine not implemented")
}
func (UnimplementedNovelServiceServer) mustEmbedUnimplementedNovelServiceServer() {}

// UnsafeNovelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelServiceServer will
// result in compilation errors.
type UnsafeNovelServiceServer interface {
	mustEmbedUnimplementedNovelServiceServer()
}

func RegisterNovelServiceServer(s grpc.ServiceRegistrar, srv NovelServiceServer) {
	s.RegisterService(&NovelService_ServiceDesc, srv)
}

func _NovelService_ListBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).ListBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_ListBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).ListBook(ctx, req.(*ListBookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_OperateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateBookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).OperateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_OperateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).OperateBook(ctx, req.(*OperateBookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_BatchOperateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateBookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).BatchOperateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_BatchOperateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).BatchOperateBook(ctx, req.(*BatchOperateBookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_ListLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLineParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).ListLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_ListLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).ListLine(ctx, req.(*ListLineParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_OperateLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateLineParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).OperateLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_OperateLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).OperateLine(ctx, req.(*OperateLineParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_BatchOperateLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateLineParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).BatchOperateLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_BatchOperateLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).BatchOperateLine(ctx, req.(*BatchOperateLineParams))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelService_ServiceDesc is the grpc.ServiceDesc for NovelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novel_service.NovelService",
	HandlerType: (*NovelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBook",
			Handler:    _NovelService_ListBook_Handler,
		},
		{
			MethodName: "OperateBook",
			Handler:    _NovelService_OperateBook_Handler,
		},
		{
			MethodName: "BatchOperateBook",
			Handler:    _NovelService_BatchOperateBook_Handler,
		},
		{
			MethodName: "ListLine",
			Handler:    _NovelService_ListLine_Handler,
		},
		{
			MethodName: "OperateLine",
			Handler:    _NovelService_OperateLine_Handler,
		},
		{
			MethodName: "BatchOperateLine",
			Handler:    _NovelService_BatchOperateLine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "novel/service.proto",
}
