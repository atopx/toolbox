// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: mainframe/computer.proto

package mainframe_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MainframePowerStatus int32

const (
	MainframePowerStatus_MAINFRAME_POWER_UNKNOWN MainframePowerStatus = 0 // 未知状态
	MainframePowerStatus_MAINFRAME_POWER_OFF     MainframePowerStatus = 1 // 关机状态
	MainframePowerStatus_MAINFRAME_POWER_ON      MainframePowerStatus = 2 // 开机状态
)

// Enum value maps for MainframePowerStatus.
var (
	MainframePowerStatus_name = map[int32]string{
		0: "MAINFRAME_POWER_UNKNOWN",
		1: "MAINFRAME_POWER_OFF",
		2: "MAINFRAME_POWER_ON",
	}
	MainframePowerStatus_value = map[string]int32{
		"MAINFRAME_POWER_UNKNOWN": 0,
		"MAINFRAME_POWER_OFF":     1,
		"MAINFRAME_POWER_ON":      2,
	}
)

func (x MainframePowerStatus) Enum() *MainframePowerStatus {
	p := new(MainframePowerStatus)
	*p = x
	return p
}

func (x MainframePowerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MainframePowerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mainframe_computer_proto_enumTypes[0].Descriptor()
}

func (MainframePowerStatus) Type() protoreflect.EnumType {
	return &file_mainframe_computer_proto_enumTypes[0]
}

func (x MainframePowerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MainframePowerStatus.Descriptor instead.
func (MainframePowerStatus) EnumDescriptor() ([]byte, []int) {
	return file_mainframe_computer_proto_rawDescGZIP(), []int{0}
}

type MainframeOperate int32

const (
	MainframeOperate_MAINFRAME_CLOSE  MainframeOperate = 0 // 关机
	MainframeOperate_MAINFRAME_OPEN   MainframeOperate = 1 // 开机
	MainframeOperate_MAINFRAME_DETECT MainframeOperate = 2 // 探测
)

// Enum value maps for MainframeOperate.
var (
	MainframeOperate_name = map[int32]string{
		0: "MAINFRAME_CLOSE",
		1: "MAINFRAME_OPEN",
		2: "MAINFRAME_DETECT",
	}
	MainframeOperate_value = map[string]int32{
		"MAINFRAME_CLOSE":  0,
		"MAINFRAME_OPEN":   1,
		"MAINFRAME_DETECT": 2,
	}
)

func (x MainframeOperate) Enum() *MainframeOperate {
	p := new(MainframeOperate)
	*p = x
	return p
}

func (x MainframeOperate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MainframeOperate) Descriptor() protoreflect.EnumDescriptor {
	return file_mainframe_computer_proto_enumTypes[1].Descriptor()
}

func (MainframeOperate) Type() protoreflect.EnumType {
	return &file_mainframe_computer_proto_enumTypes[1]
}

func (x MainframeOperate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MainframeOperate.Descriptor instead.
func (MainframeOperate) EnumDescriptor() ([]byte, []int) {
	return file_mainframe_computer_proto_rawDescGZIP(), []int{1}
}

type MainframePortProtocol int32

const (
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_UNKNOWN MainframePortProtocol = 0
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_FTPDATA MainframePortProtocol = 20
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_FTPCTL  MainframePortProtocol = 21
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_SSH     MainframePortProtocol = 22
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_TELNET  MainframePortProtocol = 23
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_SMTP    MainframePortProtocol = 25
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_DNS     MainframePortProtocol = 53
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_DHCP    MainframePortProtocol = 67
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_HTTP    MainframePortProtocol = 80
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_POP3    MainframePortProtocol = 110
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_NTP     MainframePortProtocol = 123
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_IMAP    MainframePortProtocol = 143
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_SNMP    MainframePortProtocol = 161
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_HTTPS   MainframePortProtocol = 443
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_IPSEC   MainframePortProtocol = 500
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_RADIUS  MainframePortProtocol = 1645
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_L2TP    MainframePortProtocol = 1701
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_PPTP    MainframePortProtocol = 1723
	MainframePortProtocol_MAINFRAME_PORT_PROTOCOL_RDP     MainframePortProtocol = 3389
)

// Enum value maps for MainframePortProtocol.
var (
	MainframePortProtocol_name = map[int32]string{
		0:    "MAINFRAME_PORT_PROTOCOL_UNKNOWN",
		20:   "MAINFRAME_PORT_PROTOCOL_FTPDATA",
		21:   "MAINFRAME_PORT_PROTOCOL_FTPCTL",
		22:   "MAINFRAME_PORT_PROTOCOL_SSH",
		23:   "MAINFRAME_PORT_PROTOCOL_TELNET",
		25:   "MAINFRAME_PORT_PROTOCOL_SMTP",
		53:   "MAINFRAME_PORT_PROTOCOL_DNS",
		67:   "MAINFRAME_PORT_PROTOCOL_DHCP",
		80:   "MAINFRAME_PORT_PROTOCOL_HTTP",
		110:  "MAINFRAME_PORT_PROTOCOL_POP3",
		123:  "MAINFRAME_PORT_PROTOCOL_NTP",
		143:  "MAINFRAME_PORT_PROTOCOL_IMAP",
		161:  "MAINFRAME_PORT_PROTOCOL_SNMP",
		443:  "MAINFRAME_PORT_PROTOCOL_HTTPS",
		500:  "MAINFRAME_PORT_PROTOCOL_IPSEC",
		1645: "MAINFRAME_PORT_PROTOCOL_RADIUS",
		1701: "MAINFRAME_PORT_PROTOCOL_L2TP",
		1723: "MAINFRAME_PORT_PROTOCOL_PPTP",
		3389: "MAINFRAME_PORT_PROTOCOL_RDP",
	}
	MainframePortProtocol_value = map[string]int32{
		"MAINFRAME_PORT_PROTOCOL_UNKNOWN": 0,
		"MAINFRAME_PORT_PROTOCOL_FTPDATA": 20,
		"MAINFRAME_PORT_PROTOCOL_FTPCTL":  21,
		"MAINFRAME_PORT_PROTOCOL_SSH":     22,
		"MAINFRAME_PORT_PROTOCOL_TELNET":  23,
		"MAINFRAME_PORT_PROTOCOL_SMTP":    25,
		"MAINFRAME_PORT_PROTOCOL_DNS":     53,
		"MAINFRAME_PORT_PROTOCOL_DHCP":    67,
		"MAINFRAME_PORT_PROTOCOL_HTTP":    80,
		"MAINFRAME_PORT_PROTOCOL_POP3":    110,
		"MAINFRAME_PORT_PROTOCOL_NTP":     123,
		"MAINFRAME_PORT_PROTOCOL_IMAP":    143,
		"MAINFRAME_PORT_PROTOCOL_SNMP":    161,
		"MAINFRAME_PORT_PROTOCOL_HTTPS":   443,
		"MAINFRAME_PORT_PROTOCOL_IPSEC":   500,
		"MAINFRAME_PORT_PROTOCOL_RADIUS":  1645,
		"MAINFRAME_PORT_PROTOCOL_L2TP":    1701,
		"MAINFRAME_PORT_PROTOCOL_PPTP":    1723,
		"MAINFRAME_PORT_PROTOCOL_RDP":     3389,
	}
)

func (x MainframePortProtocol) Enum() *MainframePortProtocol {
	p := new(MainframePortProtocol)
	*p = x
	return p
}

func (x MainframePortProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MainframePortProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_mainframe_computer_proto_enumTypes[2].Descriptor()
}

func (MainframePortProtocol) Type() protoreflect.EnumType {
	return &file_mainframe_computer_proto_enumTypes[2]
}

func (x MainframePortProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MainframePortProtocol.Descriptor instead.
func (MainframePortProtocol) EnumDescriptor() ([]byte, []int) {
	return file_mainframe_computer_proto_rawDescGZIP(), []int{2}
}

type MainframePortTransport int32

const (
	MainframePortTransport_MAINFRAME_TRANSPORT_UNKNOWN MainframePortTransport = 0
	MainframePortTransport_MAINFRAME_TRANSPORT_TCP     MainframePortTransport = 1
	MainframePortTransport_MAINFRAME_TRANSPORT_UDP     MainframePortTransport = 2
)

// Enum value maps for MainframePortTransport.
var (
	MainframePortTransport_name = map[int32]string{
		0: "MAINFRAME_TRANSPORT_UNKNOWN",
		1: "MAINFRAME_TRANSPORT_TCP",
		2: "MAINFRAME_TRANSPORT_UDP",
	}
	MainframePortTransport_value = map[string]int32{
		"MAINFRAME_TRANSPORT_UNKNOWN": 0,
		"MAINFRAME_TRANSPORT_TCP":     1,
		"MAINFRAME_TRANSPORT_UDP":     2,
	}
)

func (x MainframePortTransport) Enum() *MainframePortTransport {
	p := new(MainframePortTransport)
	*p = x
	return p
}

func (x MainframePortTransport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MainframePortTransport) Descriptor() protoreflect.EnumDescriptor {
	return file_mainframe_computer_proto_enumTypes[3].Descriptor()
}

func (MainframePortTransport) Type() protoreflect.EnumType {
	return &file_mainframe_computer_proto_enumTypes[3]
}

func (x MainframePortTransport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MainframePortTransport.Descriptor instead.
func (MainframePortTransport) EnumDescriptor() ([]byte, []int) {
	return file_mainframe_computer_proto_rawDescGZIP(), []int{3}
}

type MainframePortUseType int32

const (
	MainframePortUseType_MAINFRAME_PORT_USETYPE_NONE   MainframePortUseType = 0 // 空
	MainframePortUseType_MAINFRAME_PORT_USETYPE_DETECT MainframePortUseType = 1 // 网络探测
)

// Enum value maps for MainframePortUseType.
var (
	MainframePortUseType_name = map[int32]string{
		0: "MAINFRAME_PORT_USETYPE_NONE",
		1: "MAINFRAME_PORT_USETYPE_DETECT",
	}
	MainframePortUseType_value = map[string]int32{
		"MAINFRAME_PORT_USETYPE_NONE":   0,
		"MAINFRAME_PORT_USETYPE_DETECT": 1,
	}
)

func (x MainframePortUseType) Enum() *MainframePortUseType {
	p := new(MainframePortUseType)
	*p = x
	return p
}

func (x MainframePortUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MainframePortUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_mainframe_computer_proto_enumTypes[4].Descriptor()
}

func (MainframePortUseType) Type() protoreflect.EnumType {
	return &file_mainframe_computer_proto_enumTypes[4]
}

func (x MainframePortUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MainframePortUseType.Descriptor instead.
func (MainframePortUseType) EnumDescriptor() ([]byte, []int) {
	return file_mainframe_computer_proto_rawDescGZIP(), []int{4}
}

var File_mainframe_computer_proto protoreflect.FileDescriptor

var file_mainframe_computer_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x61, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2a, 0x64, 0x0a,
	0x14, 0x4d, 0x61, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f,
	0x4e, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x10, 0x4d, 0x61, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x49, 0x4e, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x10, 0x02, 0x2a, 0xaf, 0x05, 0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x46, 0x54, 0x50, 0x44, 0x41, 0x54, 0x41, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41,
	0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x46, 0x54, 0x50, 0x43, 0x54, 0x4c, 0x10, 0x15, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x16, 0x12,
	0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x45, 0x4c, 0x4e, 0x45,
	0x54, 0x10, 0x17, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53,
	0x4d, 0x54, 0x50, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x44, 0x4e, 0x53, 0x10, 0x35, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x43, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x49, 0x4e,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x50, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41,
	0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x4f, 0x50, 0x33, 0x10, 0x6e, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x54, 0x50, 0x10, 0x7b, 0x12, 0x21, 0x0a,
	0x1c, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4d, 0x41, 0x50, 0x10, 0x8f, 0x01,
	0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x4e, 0x4d, 0x50,
	0x10, 0xa1, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x53, 0x10, 0xbb, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x41, 0x49, 0x4e, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x10, 0xf4, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x4d,
	0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x10, 0xed, 0x0c,
	0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4c, 0x32, 0x54, 0x50,
	0x10, 0xa5, 0x0d, 0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50,
	0x50, 0x54, 0x50, 0x10, 0xbb, 0x0d, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x52, 0x44, 0x50, 0x10, 0xbd, 0x1a, 0x2a, 0x73, 0x0a, 0x16, 0x4d, 0x61, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x02, 0x2a, 0x5a, 0x0a,
	0x14, 0x4d, 0x61, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x42, 0x26, 0x5a, 0x24, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
	0x6d, 0x61, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mainframe_computer_proto_rawDescOnce sync.Once
	file_mainframe_computer_proto_rawDescData = file_mainframe_computer_proto_rawDesc
)

func file_mainframe_computer_proto_rawDescGZIP() []byte {
	file_mainframe_computer_proto_rawDescOnce.Do(func() {
		file_mainframe_computer_proto_rawDescData = protoimpl.X.CompressGZIP(file_mainframe_computer_proto_rawDescData)
	})
	return file_mainframe_computer_proto_rawDescData
}

var file_mainframe_computer_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_mainframe_computer_proto_goTypes = []interface{}{
	(MainframePowerStatus)(0),   // 0: mainframe_service.MainframePowerStatus
	(MainframeOperate)(0),       // 1: mainframe_service.MainframeOperate
	(MainframePortProtocol)(0),  // 2: mainframe_service.MainframePortProtocol
	(MainframePortTransport)(0), // 3: mainframe_service.MainframePortTransport
	(MainframePortUseType)(0),   // 4: mainframe_service.MainframePortUseType
}
var file_mainframe_computer_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mainframe_computer_proto_init() }
func file_mainframe_computer_proto_init() {
	if File_mainframe_computer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mainframe_computer_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mainframe_computer_proto_goTypes,
		DependencyIndexes: file_mainframe_computer_proto_depIdxs,
		EnumInfos:         file_mainframe_computer_proto_enumTypes,
	}.Build()
	File_mainframe_computer_proto = out.File
	file_mainframe_computer_proto_rawDesc = nil
	file_mainframe_computer_proto_goTypes = nil
	file_mainframe_computer_proto_depIdxs = nil
}
