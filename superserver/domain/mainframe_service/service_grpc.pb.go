// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mainframe/service.proto

package mainframe_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainframeServiceClient is the client API for MainframeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainframeServiceClient interface {
	DealComputer(ctx context.Context, in *DealComputerParams, opts ...grpc.CallOption) (*DealComputerReply, error)
	ListComputer(ctx context.Context, in *ListComputerParams, opts ...grpc.CallOption) (*ListComputerReply, error)
	OperateComputer(ctx context.Context, in *OperateComputerParams, opts ...grpc.CallOption) (*OperateComputerReply, error)
	BatchOperateComputer(ctx context.Context, in *BatchOperateComputerParams, opts ...grpc.CallOption) (*BatchOperateComputerReply, error)
}

type mainframeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMainframeServiceClient(cc grpc.ClientConnInterface) MainframeServiceClient {
	return &mainframeServiceClient{cc}
}

func (c *mainframeServiceClient) DealComputer(ctx context.Context, in *DealComputerParams, opts ...grpc.CallOption) (*DealComputerReply, error) {
	out := new(DealComputerReply)
	err := c.cc.Invoke(ctx, "/mainframe_service.MainframeService/DealComputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainframeServiceClient) ListComputer(ctx context.Context, in *ListComputerParams, opts ...grpc.CallOption) (*ListComputerReply, error) {
	out := new(ListComputerReply)
	err := c.cc.Invoke(ctx, "/mainframe_service.MainframeService/ListComputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainframeServiceClient) OperateComputer(ctx context.Context, in *OperateComputerParams, opts ...grpc.CallOption) (*OperateComputerReply, error) {
	out := new(OperateComputerReply)
	err := c.cc.Invoke(ctx, "/mainframe_service.MainframeService/OperateComputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainframeServiceClient) BatchOperateComputer(ctx context.Context, in *BatchOperateComputerParams, opts ...grpc.CallOption) (*BatchOperateComputerReply, error) {
	out := new(BatchOperateComputerReply)
	err := c.cc.Invoke(ctx, "/mainframe_service.MainframeService/BatchOperateComputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainframeServiceServer is the server API for MainframeService service.
// All implementations must embed UnimplementedMainframeServiceServer
// for forward compatibility
type MainframeServiceServer interface {
	DealComputer(context.Context, *DealComputerParams) (*DealComputerReply, error)
	ListComputer(context.Context, *ListComputerParams) (*ListComputerReply, error)
	OperateComputer(context.Context, *OperateComputerParams) (*OperateComputerReply, error)
	BatchOperateComputer(context.Context, *BatchOperateComputerParams) (*BatchOperateComputerReply, error)
	mustEmbedUnimplementedMainframeServiceServer()
}

// UnimplementedMainframeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMainframeServiceServer struct {
}

func (UnimplementedMainframeServiceServer) DealComputer(context.Context, *DealComputerParams) (*DealComputerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealComputer not implemented")
}
func (UnimplementedMainframeServiceServer) ListComputer(context.Context, *ListComputerParams) (*ListComputerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComputer not implemented")
}
func (UnimplementedMainframeServiceServer) OperateComputer(context.Context, *OperateComputerParams) (*OperateComputerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateComputer not implemented")
}
func (UnimplementedMainframeServiceServer) BatchOperateComputer(context.Context, *BatchOperateComputerParams) (*BatchOperateComputerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateComputer not implemented")
}
func (UnimplementedMainframeServiceServer) mustEmbedUnimplementedMainframeServiceServer() {}

// UnsafeMainframeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainframeServiceServer will
// result in compilation errors.
type UnsafeMainframeServiceServer interface {
	mustEmbedUnimplementedMainframeServiceServer()
}

func RegisterMainframeServiceServer(s grpc.ServiceRegistrar, srv MainframeServiceServer) {
	s.RegisterService(&MainframeService_ServiceDesc, srv)
}

func _MainframeService_DealComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealComputerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainframeServiceServer).DealComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe_service.MainframeService/DealComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainframeServiceServer).DealComputer(ctx, req.(*DealComputerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainframeService_ListComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComputerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainframeServiceServer).ListComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe_service.MainframeService/ListComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainframeServiceServer).ListComputer(ctx, req.(*ListComputerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainframeService_OperateComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateComputerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainframeServiceServer).OperateComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe_service.MainframeService/OperateComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainframeServiceServer).OperateComputer(ctx, req.(*OperateComputerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainframeService_BatchOperateComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateComputerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainframeServiceServer).BatchOperateComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe_service.MainframeService/BatchOperateComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainframeServiceServer).BatchOperateComputer(ctx, req.(*BatchOperateComputerParams))
	}
	return interceptor(ctx, in, info, handler)
}

// MainframeService_ServiceDesc is the grpc.ServiceDesc for MainframeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainframeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mainframe_service.MainframeService",
	HandlerType: (*MainframeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DealComputer",
			Handler:    _MainframeService_DealComputer_Handler,
		},
		{
			MethodName: "ListComputer",
			Handler:    _MainframeService_ListComputer_Handler,
		},
		{
			MethodName: "OperateComputer",
			Handler:    _MainframeService_OperateComputer_Handler,
		},
		{
			MethodName: "BatchOperateComputer",
			Handler:    _MainframeService_BatchOperateComputer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainframe/service.proto",
}
