// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: note/service.proto

package note_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NoteService_ListNote_FullMethodName              = "/note_service.NoteService/ListNote"
	NoteService_OperateNote_FullMethodName           = "/note_service.NoteService/OperateNote"
	NoteService_BatchOperateNote_FullMethodName      = "/note_service.NoteService/BatchOperateNote"
	NoteService_ListNoteTopic_FullMethodName         = "/note_service.NoteService/ListNoteTopic"
	NoteService_OperateNoteTopic_FullMethodName      = "/note_service.NoteService/OperateNoteTopic"
	NoteService_BatchOperateNoteTopic_FullMethodName = "/note_service.NoteService/BatchOperateNoteTopic"
	NoteService_ListNoteLabel_FullMethodName         = "/note_service.NoteService/ListNoteLabel"
	NoteService_OperateNoteLabel_FullMethodName      = "/note_service.NoteService/OperateNoteLabel"
	NoteService_BatchOperateNoteLabel_FullMethodName = "/note_service.NoteService/BatchOperateNoteLabel"
)

// NoteServiceClient is the client API for NoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteServiceClient interface {
	// 笔记
	ListNote(ctx context.Context, in *ListNoteParams, opts ...grpc.CallOption) (*ListNoteReply, error)
	OperateNote(ctx context.Context, in *OperateNoteParams, opts ...grpc.CallOption) (*OperateNoteReply, error)
	BatchOperateNote(ctx context.Context, in *BatchOperateNoteParams, opts ...grpc.CallOption) (*BatchOperateNoteReply, error)
	// 笔记主题
	ListNoteTopic(ctx context.Context, in *ListNoteTopicParams, opts ...grpc.CallOption) (*ListNoteTopicReply, error)
	OperateNoteTopic(ctx context.Context, in *OperateNoteTopicParams, opts ...grpc.CallOption) (*OperateNoteTopicReply, error)
	BatchOperateNoteTopic(ctx context.Context, in *BatchOperateNoteTopicParams, opts ...grpc.CallOption) (*BatchOperateNoteTopicReply, error)
	// 笔记标签
	ListNoteLabel(ctx context.Context, in *ListNoteLabelParams, opts ...grpc.CallOption) (*ListNoteLabelReply, error)
	OperateNoteLabel(ctx context.Context, in *OperateNoteLabelParams, opts ...grpc.CallOption) (*OperateNoteLabelReply, error)
	BatchOperateNoteLabel(ctx context.Context, in *BatchOperateNoteLabelParams, opts ...grpc.CallOption) (*BatchOperateNoteLabelReply, error)
}

type noteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteServiceClient(cc grpc.ClientConnInterface) NoteServiceClient {
	return &noteServiceClient{cc}
}

func (c *noteServiceClient) ListNote(ctx context.Context, in *ListNoteParams, opts ...grpc.CallOption) (*ListNoteReply, error) {
	out := new(ListNoteReply)
	err := c.cc.Invoke(ctx, NoteService_ListNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) OperateNote(ctx context.Context, in *OperateNoteParams, opts ...grpc.CallOption) (*OperateNoteReply, error) {
	out := new(OperateNoteReply)
	err := c.cc.Invoke(ctx, NoteService_OperateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) BatchOperateNote(ctx context.Context, in *BatchOperateNoteParams, opts ...grpc.CallOption) (*BatchOperateNoteReply, error) {
	out := new(BatchOperateNoteReply)
	err := c.cc.Invoke(ctx, NoteService_BatchOperateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) ListNoteTopic(ctx context.Context, in *ListNoteTopicParams, opts ...grpc.CallOption) (*ListNoteTopicReply, error) {
	out := new(ListNoteTopicReply)
	err := c.cc.Invoke(ctx, NoteService_ListNoteTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) OperateNoteTopic(ctx context.Context, in *OperateNoteTopicParams, opts ...grpc.CallOption) (*OperateNoteTopicReply, error) {
	out := new(OperateNoteTopicReply)
	err := c.cc.Invoke(ctx, NoteService_OperateNoteTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) BatchOperateNoteTopic(ctx context.Context, in *BatchOperateNoteTopicParams, opts ...grpc.CallOption) (*BatchOperateNoteTopicReply, error) {
	out := new(BatchOperateNoteTopicReply)
	err := c.cc.Invoke(ctx, NoteService_BatchOperateNoteTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) ListNoteLabel(ctx context.Context, in *ListNoteLabelParams, opts ...grpc.CallOption) (*ListNoteLabelReply, error) {
	out := new(ListNoteLabelReply)
	err := c.cc.Invoke(ctx, NoteService_ListNoteLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) OperateNoteLabel(ctx context.Context, in *OperateNoteLabelParams, opts ...grpc.CallOption) (*OperateNoteLabelReply, error) {
	out := new(OperateNoteLabelReply)
	err := c.cc.Invoke(ctx, NoteService_OperateNoteLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) BatchOperateNoteLabel(ctx context.Context, in *BatchOperateNoteLabelParams, opts ...grpc.CallOption) (*BatchOperateNoteLabelReply, error) {
	out := new(BatchOperateNoteLabelReply)
	err := c.cc.Invoke(ctx, NoteService_BatchOperateNoteLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServiceServer is the server API for NoteService service.
// All implementations must embed UnimplementedNoteServiceServer
// for forward compatibility
type NoteServiceServer interface {
	// 笔记
	ListNote(context.Context, *ListNoteParams) (*ListNoteReply, error)
	OperateNote(context.Context, *OperateNoteParams) (*OperateNoteReply, error)
	BatchOperateNote(context.Context, *BatchOperateNoteParams) (*BatchOperateNoteReply, error)
	// 笔记主题
	ListNoteTopic(context.Context, *ListNoteTopicParams) (*ListNoteTopicReply, error)
	OperateNoteTopic(context.Context, *OperateNoteTopicParams) (*OperateNoteTopicReply, error)
	BatchOperateNoteTopic(context.Context, *BatchOperateNoteTopicParams) (*BatchOperateNoteTopicReply, error)
	// 笔记标签
	ListNoteLabel(context.Context, *ListNoteLabelParams) (*ListNoteLabelReply, error)
	OperateNoteLabel(context.Context, *OperateNoteLabelParams) (*OperateNoteLabelReply, error)
	BatchOperateNoteLabel(context.Context, *BatchOperateNoteLabelParams) (*BatchOperateNoteLabelReply, error)
	mustEmbedUnimplementedNoteServiceServer()
}

// UnimplementedNoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoteServiceServer struct {
}

func (UnimplementedNoteServiceServer) ListNote(context.Context, *ListNoteParams) (*ListNoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNote not implemented")
}
func (UnimplementedNoteServiceServer) OperateNote(context.Context, *OperateNoteParams) (*OperateNoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateNote not implemented")
}
func (UnimplementedNoteServiceServer) BatchOperateNote(context.Context, *BatchOperateNoteParams) (*BatchOperateNoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateNote not implemented")
}
func (UnimplementedNoteServiceServer) ListNoteTopic(context.Context, *ListNoteTopicParams) (*ListNoteTopicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNoteTopic not implemented")
}
func (UnimplementedNoteServiceServer) OperateNoteTopic(context.Context, *OperateNoteTopicParams) (*OperateNoteTopicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateNoteTopic not implemented")
}
func (UnimplementedNoteServiceServer) BatchOperateNoteTopic(context.Context, *BatchOperateNoteTopicParams) (*BatchOperateNoteTopicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateNoteTopic not implemented")
}
func (UnimplementedNoteServiceServer) ListNoteLabel(context.Context, *ListNoteLabelParams) (*ListNoteLabelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNoteLabel not implemented")
}
func (UnimplementedNoteServiceServer) OperateNoteLabel(context.Context, *OperateNoteLabelParams) (*OperateNoteLabelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateNoteLabel not implemented")
}
func (UnimplementedNoteServiceServer) BatchOperateNoteLabel(context.Context, *BatchOperateNoteLabelParams) (*BatchOperateNoteLabelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateNoteLabel not implemented")
}
func (UnimplementedNoteServiceServer) mustEmbedUnimplementedNoteServiceServer() {}

// UnsafeNoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServiceServer will
// result in compilation errors.
type UnsafeNoteServiceServer interface {
	mustEmbedUnimplementedNoteServiceServer()
}

func RegisterNoteServiceServer(s grpc.ServiceRegistrar, srv NoteServiceServer) {
	s.RegisterService(&NoteService_ServiceDesc, srv)
}

func _NoteService_ListNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).ListNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_ListNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).ListNote(ctx, req.(*ListNoteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_OperateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateNoteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).OperateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_OperateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).OperateNote(ctx, req.(*OperateNoteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_BatchOperateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateNoteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).BatchOperateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_BatchOperateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).BatchOperateNote(ctx, req.(*BatchOperateNoteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_ListNoteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoteTopicParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).ListNoteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_ListNoteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).ListNoteTopic(ctx, req.(*ListNoteTopicParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_OperateNoteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateNoteTopicParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).OperateNoteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_OperateNoteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).OperateNoteTopic(ctx, req.(*OperateNoteTopicParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_BatchOperateNoteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateNoteTopicParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).BatchOperateNoteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_BatchOperateNoteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).BatchOperateNoteTopic(ctx, req.(*BatchOperateNoteTopicParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_ListNoteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoteLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).ListNoteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_ListNoteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).ListNoteLabel(ctx, req.(*ListNoteLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_OperateNoteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateNoteLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).OperateNoteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_OperateNoteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).OperateNoteLabel(ctx, req.(*OperateNoteLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_BatchOperateNoteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateNoteLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).BatchOperateNoteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_BatchOperateNoteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).BatchOperateNoteLabel(ctx, req.(*BatchOperateNoteLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteService_ServiceDesc is the grpc.ServiceDesc for NoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note_service.NoteService",
	HandlerType: (*NoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNote",
			Handler:    _NoteService_ListNote_Handler,
		},
		{
			MethodName: "OperateNote",
			Handler:    _NoteService_OperateNote_Handler,
		},
		{
			MethodName: "BatchOperateNote",
			Handler:    _NoteService_BatchOperateNote_Handler,
		},
		{
			MethodName: "ListNoteTopic",
			Handler:    _NoteService_ListNoteTopic_Handler,
		},
		{
			MethodName: "OperateNoteTopic",
			Handler:    _NoteService_OperateNoteTopic_Handler,
		},
		{
			MethodName: "BatchOperateNoteTopic",
			Handler:    _NoteService_BatchOperateNoteTopic_Handler,
		},
		{
			MethodName: "ListNoteLabel",
			Handler:    _NoteService_ListNoteLabel_Handler,
		},
		{
			MethodName: "OperateNoteLabel",
			Handler:    _NoteService_OperateNoteLabel_Handler,
		},
		{
			MethodName: "BatchOperateNoteLabel",
			Handler:    _NoteService_BatchOperateNoteLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note/service.proto",
}
