// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: public/ecode.proto

package ecode

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECode int32

const (
	ECode_SUCCESS ECode = 0 // 默认无错误
	// ######### 客户端错误 #########
	ECode_BAD_REQUEST ECode = 400000 // 请求异常
	// auth token error
	ECode_AUTH_TOKEN_Required ECode = 400001 // 账户未登录
	ECode_AUTH_TOKEN_Invalid  ECode = 400002 // 无效Token
	ECode_AUTH_TOKEN_NotFound ECode = 400003 // token不存在
	ECode_AUTH_TOKEN_Expired  ECode = 400004 // token过期
	// access error
	ECode_ACCESS_NotFound  ECode = 401001
	ECode_ACCESS_Forbidden ECode = 401002 // 没有访问权限
	ECode_ACCESS_Disabled  ECode = 401003 // 接口已禁用
	// ######### 参数错误 #########
	ECode_INVALID_PARAMS ECode = 431000 // 参数异常
	// user params error
	ECode_USER_PARAMS_ERROR_NameRequired     ECode = 431001
	ECode_USER_PARAMS_ERROR_UsernameRequired ECode = 431002
	ECode_USER_PARAMS_ERROR_PasswordRequired ECode = 431003
	ECode_USER_PARAMS_ERROR_UsernameExist    ECode = 431004
	ECode_USER_PARAMS_ERROR_UserNotFound     ECode = 431005
	// user login
	ECode_USER_PARAMS_ERROR_NameInvalid     ECode = 431006
	ECode_USER_PARAMS_ERROR_UsernameInvalid ECode = 431007
	ECode_USER_PARAMS_ERROR_PasswordInvalid ECode = 431008
	// ######### 服务端错误 #########
	ECode_SYSTEM_INTERNAL_ERROR      ECode = 500000 // 服务异常
	ECode_SYSTEM_ERROR_Unimplemented ECode = 500001 // 功能未实现
	// auth-service access error
	ECode_AUTH_SERVICE_ERROR_ListAccess         ECode = 510001
	ECode_AUTH_SERVICE_ERROR_OperateAccess      ECode = 510002
	ECode_AUTH_SERVICE_ERROR_BatchOperateAccess ECode = 510003
	// auth-service token error
	ECode_AUTH_SERVICE_ERROR_ListAuthToken         ECode = 511001
	ECode_AUTH_SERVICE_ERROR_OperateAuthToken      ECode = 511002
	ECode_AUTH_SERVICE_ERROR_BatchOperateAuthToken ECode = 511003
	// auth-service user error
	ECode_AUTH_SERVICE_ERROR_ListUser         ECode = 512001
	ECode_AUTH_SERVICE_ERROR_OperateUser      ECode = 512002
	ECode_AUTH_SERVICE_ERROR_BatchOperateUser ECode = 512003
	// auth-service role error
	ECode_AUTH_SERVICE_ERROR_ListRole         ECode = 513001
	ECode_AUTH_SERVICE_ERROR_OperateRole      ECode = 513002
	ECode_AUTH_SERVICE_ERROR_BatchOperateRole ECode = 513003
	// auth-service permission error
	ECode_AUTH_SERVICE_ERROR_ListUserRoleRef         ECode = 514001
	ECode_AUTH_SERVICE_ERROR_OperateUserRoleRef      ECode = 514002
	ECode_AUTH_SERVICE_ERROR_BatchOperateUserRoleRef ECode = 514003
	// auth-service permission error
	ECode_AUTH_SERVICE_ERROR_ListPermission         ECode = 515001
	ECode_AUTH_SERVICE_ERROR_OperatePermission      ECode = 515002
	ECode_AUTH_SERVICE_ERROR_BatchOperatePermission ECode = 515003
)

// Enum value maps for ECode.
var (
	ECode_name = map[int32]string{
		0:      "SUCCESS",
		400000: "BAD_REQUEST",
		400001: "AUTH_TOKEN_Required",
		400002: "AUTH_TOKEN_Invalid",
		400003: "AUTH_TOKEN_NotFound",
		400004: "AUTH_TOKEN_Expired",
		401001: "ACCESS_NotFound",
		401002: "ACCESS_Forbidden",
		401003: "ACCESS_Disabled",
		431000: "INVALID_PARAMS",
		431001: "USER_PARAMS_ERROR_NameRequired",
		431002: "USER_PARAMS_ERROR_UsernameRequired",
		431003: "USER_PARAMS_ERROR_PasswordRequired",
		431004: "USER_PARAMS_ERROR_UsernameExist",
		431005: "USER_PARAMS_ERROR_UserNotFound",
		431006: "USER_PARAMS_ERROR_NameInvalid",
		431007: "USER_PARAMS_ERROR_UsernameInvalid",
		431008: "USER_PARAMS_ERROR_PasswordInvalid",
		500000: "SYSTEM_INTERNAL_ERROR",
		500001: "SYSTEM_ERROR_Unimplemented",
		510001: "AUTH_SERVICE_ERROR_ListAccess",
		510002: "AUTH_SERVICE_ERROR_OperateAccess",
		510003: "AUTH_SERVICE_ERROR_BatchOperateAccess",
		511001: "AUTH_SERVICE_ERROR_ListAuthToken",
		511002: "AUTH_SERVICE_ERROR_OperateAuthToken",
		511003: "AUTH_SERVICE_ERROR_BatchOperateAuthToken",
		512001: "AUTH_SERVICE_ERROR_ListUser",
		512002: "AUTH_SERVICE_ERROR_OperateUser",
		512003: "AUTH_SERVICE_ERROR_BatchOperateUser",
		513001: "AUTH_SERVICE_ERROR_ListRole",
		513002: "AUTH_SERVICE_ERROR_OperateRole",
		513003: "AUTH_SERVICE_ERROR_BatchOperateRole",
		514001: "AUTH_SERVICE_ERROR_ListUserRoleRef",
		514002: "AUTH_SERVICE_ERROR_OperateUserRoleRef",
		514003: "AUTH_SERVICE_ERROR_BatchOperateUserRoleRef",
		515001: "AUTH_SERVICE_ERROR_ListPermission",
		515002: "AUTH_SERVICE_ERROR_OperatePermission",
		515003: "AUTH_SERVICE_ERROR_BatchOperatePermission",
	}
	ECode_value = map[string]int32{
		"SUCCESS":                                    0,
		"BAD_REQUEST":                                400000,
		"AUTH_TOKEN_Required":                        400001,
		"AUTH_TOKEN_Invalid":                         400002,
		"AUTH_TOKEN_NotFound":                        400003,
		"AUTH_TOKEN_Expired":                         400004,
		"ACCESS_NotFound":                            401001,
		"ACCESS_Forbidden":                           401002,
		"ACCESS_Disabled":                            401003,
		"INVALID_PARAMS":                             431000,
		"USER_PARAMS_ERROR_NameRequired":             431001,
		"USER_PARAMS_ERROR_UsernameRequired":         431002,
		"USER_PARAMS_ERROR_PasswordRequired":         431003,
		"USER_PARAMS_ERROR_UsernameExist":            431004,
		"USER_PARAMS_ERROR_UserNotFound":             431005,
		"USER_PARAMS_ERROR_NameInvalid":              431006,
		"USER_PARAMS_ERROR_UsernameInvalid":          431007,
		"USER_PARAMS_ERROR_PasswordInvalid":          431008,
		"SYSTEM_INTERNAL_ERROR":                      500000,
		"SYSTEM_ERROR_Unimplemented":                 500001,
		"AUTH_SERVICE_ERROR_ListAccess":              510001,
		"AUTH_SERVICE_ERROR_OperateAccess":           510002,
		"AUTH_SERVICE_ERROR_BatchOperateAccess":      510003,
		"AUTH_SERVICE_ERROR_ListAuthToken":           511001,
		"AUTH_SERVICE_ERROR_OperateAuthToken":        511002,
		"AUTH_SERVICE_ERROR_BatchOperateAuthToken":   511003,
		"AUTH_SERVICE_ERROR_ListUser":                512001,
		"AUTH_SERVICE_ERROR_OperateUser":             512002,
		"AUTH_SERVICE_ERROR_BatchOperateUser":        512003,
		"AUTH_SERVICE_ERROR_ListRole":                513001,
		"AUTH_SERVICE_ERROR_OperateRole":             513002,
		"AUTH_SERVICE_ERROR_BatchOperateRole":        513003,
		"AUTH_SERVICE_ERROR_ListUserRoleRef":         514001,
		"AUTH_SERVICE_ERROR_OperateUserRoleRef":      514002,
		"AUTH_SERVICE_ERROR_BatchOperateUserRoleRef": 514003,
		"AUTH_SERVICE_ERROR_ListPermission":          515001,
		"AUTH_SERVICE_ERROR_OperatePermission":       515002,
		"AUTH_SERVICE_ERROR_BatchOperatePermission":  515003,
	}
)

func (x ECode) Enum() *ECode {
	p := new(ECode)
	*p = x
	return p
}

func (x ECode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECode) Descriptor() protoreflect.EnumDescriptor {
	return file_public_ecode_proto_enumTypes[0].Descriptor()
}

func (ECode) Type() protoreflect.EnumType {
	return &file_public_ecode_proto_enumTypes[0]
}

func (x ECode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECode.Descriptor instead.
func (ECode) EnumDescriptor() ([]byte, []int) {
	return file_public_ecode_proto_rawDescGZIP(), []int{0}
}

var File_public_ecode_proto protoreflect.FileDescriptor

var file_public_ecode_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2a, 0xde, 0x0a, 0x0a,
	0x05, 0x45, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x80, 0xb5, 0x18, 0x12, 0x19, 0x0a, 0x13, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x81, 0xb5,
	0x18, 0x12, 0x18, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x82, 0xb5, 0x18, 0x12, 0x19, 0x0a, 0x13, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x83, 0xb5, 0x18, 0x12, 0x18, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x84, 0xb5, 0x18,
	0x12, 0x15, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0xe9, 0xbc, 0x18, 0x12, 0x16, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10, 0xea, 0xbc, 0x18, 0x12,
	0x15, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0xeb, 0xbc, 0x18, 0x12, 0x14, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x98, 0xa7, 0x1a, 0x12, 0x24, 0x0a, 0x1e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x99,
	0xa7, 0x1a, 0x12, 0x28, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x9a, 0xa7, 0x1a, 0x12, 0x28, 0x0a, 0x22,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x10, 0x9b, 0xa7, 0x1a, 0x12, 0x25, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x9c, 0xa7, 0x1a, 0x12, 0x24, 0x0a,
	0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10,
	0x9d, 0xa7, 0x1a, 0x12, 0x23, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x9e, 0xa7, 0x1a, 0x12, 0x27, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x9f, 0xa7,
	0x1a, 0x12, 0x27, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xa0, 0xa7, 0x1a, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xa0, 0xc2, 0x1e, 0x12, 0x20, 0x0a, 0x1a, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x10, 0xa1, 0xc2, 0x1e, 0x12, 0x23, 0x0a, 0x1d, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0xb1, 0x90, 0x1f, 0x12, 0x26,
	0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0xb2, 0x90, 0x1f, 0x12, 0x2b, 0x0a, 0x25, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0xb3, 0x90, 0x1f, 0x12, 0x26, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x99, 0x98, 0x1f, 0x12, 0x29, 0x0a, 0x23, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x10, 0x9a, 0x98, 0x1f, 0x12, 0x2e, 0x0a, 0x28, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x10, 0x9b, 0x98, 0x1f, 0x12, 0x21, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0x81, 0xa0, 0x1f, 0x12, 0x24, 0x0a, 0x1e, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x82, 0xa0, 0x1f, 0x12,
	0x29, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x83, 0xa0, 0x1f, 0x12, 0x21, 0x0a, 0x1b, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xe9, 0xa7, 0x1f, 0x12, 0x24, 0x0a,
	0x1e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x10,
	0xea, 0xa7, 0x1f, 0x12, 0x29, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xeb, 0xa7, 0x1f, 0x12, 0x28,
	0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x10, 0xd1, 0xaf, 0x1f, 0x12, 0x2b, 0x0a, 0x25, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x10, 0xd2, 0xaf, 0x1f, 0x12, 0x30, 0x0a, 0x2a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x10, 0xd3, 0xaf, 0x1f, 0x12, 0x27, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xb9, 0xb7, 0x1f,
	0x12, 0x2a, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xba, 0xb7, 0x1f, 0x12, 0x2f, 0x0a, 0x29,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xbb, 0xb7, 0x1f, 0x42, 0x21, 0x5a,
	0x1f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_ecode_proto_rawDescOnce sync.Once
	file_public_ecode_proto_rawDescData = file_public_ecode_proto_rawDesc
)

func file_public_ecode_proto_rawDescGZIP() []byte {
	file_public_ecode_proto_rawDescOnce.Do(func() {
		file_public_ecode_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_ecode_proto_rawDescData)
	})
	return file_public_ecode_proto_rawDescData
}

var file_public_ecode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_public_ecode_proto_goTypes = []interface{}{
	(ECode)(0), // 0: public.ECode
}
var file_public_ecode_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_public_ecode_proto_init() }
func file_public_ecode_proto_init() {
	if File_public_ecode_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_ecode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_ecode_proto_goTypes,
		DependencyIndexes: file_public_ecode_proto_depIdxs,
		EnumInfos:         file_public_ecode_proto_enumTypes,
	}.Build()
	File_public_ecode_proto = out.File
	file_public_ecode_proto_rawDesc = nil
	file_public_ecode_proto_goTypes = nil
	file_public_ecode_proto_depIdxs = nil
}
