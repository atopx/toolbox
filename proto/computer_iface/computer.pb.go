// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: proto/defines/computer.proto

package computer_iface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComputerPowerStatus int32

const (
	ComputerPowerStatus_COMPUTER_POWER_UNKNOWN ComputerPowerStatus = 0 // 未知状态
	ComputerPowerStatus_COMPUTER_POWER_OFF     ComputerPowerStatus = 1 // 关机状态
	ComputerPowerStatus_COMPUTER_POWER_ON      ComputerPowerStatus = 2 // 开机状态
)

// Enum value maps for ComputerPowerStatus.
var (
	ComputerPowerStatus_name = map[int32]string{
		0: "COMPUTER_POWER_UNKNOWN",
		1: "COMPUTER_POWER_OFF",
		2: "COMPUTER_POWER_ON",
	}
	ComputerPowerStatus_value = map[string]int32{
		"COMPUTER_POWER_UNKNOWN": 0,
		"COMPUTER_POWER_OFF":     1,
		"COMPUTER_POWER_ON":      2,
	}
)

func (x ComputerPowerStatus) Enum() *ComputerPowerStatus {
	p := new(ComputerPowerStatus)
	*p = x
	return p
}

func (x ComputerPowerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputerPowerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_defines_computer_proto_enumTypes[0].Descriptor()
}

func (ComputerPowerStatus) Type() protoreflect.EnumType {
	return &file_proto_defines_computer_proto_enumTypes[0]
}

func (x ComputerPowerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputerPowerStatus.Descriptor instead.
func (ComputerPowerStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_defines_computer_proto_rawDescGZIP(), []int{0}
}

type ComputerOperate int32

const (
	ComputerOperate_COMPUTER_OPERATE_OFF    ComputerOperate = 0 // 关机
	ComputerOperate_COMPUTER_OPERATE_ON     ComputerOperate = 1 // 开机
	ComputerOperate_COMPUTER_OPERATE_DETECT ComputerOperate = 2 // 探测
)

// Enum value maps for ComputerOperate.
var (
	ComputerOperate_name = map[int32]string{
		0: "COMPUTER_OPERATE_OFF",
		1: "COMPUTER_OPERATE_ON",
		2: "COMPUTER_OPERATE_DETECT",
	}
	ComputerOperate_value = map[string]int32{
		"COMPUTER_OPERATE_OFF":    0,
		"COMPUTER_OPERATE_ON":     1,
		"COMPUTER_OPERATE_DETECT": 2,
	}
)

func (x ComputerOperate) Enum() *ComputerOperate {
	p := new(ComputerOperate)
	*p = x
	return p
}

func (x ComputerOperate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputerOperate) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_defines_computer_proto_enumTypes[1].Descriptor()
}

func (ComputerOperate) Type() protoreflect.EnumType {
	return &file_proto_defines_computer_proto_enumTypes[1]
}

func (x ComputerOperate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputerOperate.Descriptor instead.
func (ComputerOperate) EnumDescriptor() ([]byte, []int) {
	return file_proto_defines_computer_proto_rawDescGZIP(), []int{1}
}

type ComputerPortProtocol int32

const (
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_UNKNOWN ComputerPortProtocol = 0
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_FTPDATA ComputerPortProtocol = 20
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_FTPCTL  ComputerPortProtocol = 21
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_SSH     ComputerPortProtocol = 22
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_TELNET  ComputerPortProtocol = 23
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_SMTP    ComputerPortProtocol = 25
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_DNS     ComputerPortProtocol = 53
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_DHCP    ComputerPortProtocol = 67
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_HTTP    ComputerPortProtocol = 80
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_POP3    ComputerPortProtocol = 110
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_NTP     ComputerPortProtocol = 123
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_IMAP    ComputerPortProtocol = 143
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_SNMP    ComputerPortProtocol = 161
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_HTTPS   ComputerPortProtocol = 443
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_IPSEC   ComputerPortProtocol = 500
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_RADIUS  ComputerPortProtocol = 1645
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_L2TP    ComputerPortProtocol = 1701
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_PPTP    ComputerPortProtocol = 1723
	ComputerPortProtocol_COMPUTER_PORT_PROTOCOL_RDP     ComputerPortProtocol = 3389
)

// Enum value maps for ComputerPortProtocol.
var (
	ComputerPortProtocol_name = map[int32]string{
		0:    "COMPUTER_PORT_PROTOCOL_UNKNOWN",
		20:   "COMPUTER_PORT_PROTOCOL_FTPDATA",
		21:   "COMPUTER_PORT_PROTOCOL_FTPCTL",
		22:   "COMPUTER_PORT_PROTOCOL_SSH",
		23:   "COMPUTER_PORT_PROTOCOL_TELNET",
		25:   "COMPUTER_PORT_PROTOCOL_SMTP",
		53:   "COMPUTER_PORT_PROTOCOL_DNS",
		67:   "COMPUTER_PORT_PROTOCOL_DHCP",
		80:   "COMPUTER_PORT_PROTOCOL_HTTP",
		110:  "COMPUTER_PORT_PROTOCOL_POP3",
		123:  "COMPUTER_PORT_PROTOCOL_NTP",
		143:  "COMPUTER_PORT_PROTOCOL_IMAP",
		161:  "COMPUTER_PORT_PROTOCOL_SNMP",
		443:  "COMPUTER_PORT_PROTOCOL_HTTPS",
		500:  "COMPUTER_PORT_PROTOCOL_IPSEC",
		1645: "COMPUTER_PORT_PROTOCOL_RADIUS",
		1701: "COMPUTER_PORT_PROTOCOL_L2TP",
		1723: "COMPUTER_PORT_PROTOCOL_PPTP",
		3389: "COMPUTER_PORT_PROTOCOL_RDP",
	}
	ComputerPortProtocol_value = map[string]int32{
		"COMPUTER_PORT_PROTOCOL_UNKNOWN": 0,
		"COMPUTER_PORT_PROTOCOL_FTPDATA": 20,
		"COMPUTER_PORT_PROTOCOL_FTPCTL":  21,
		"COMPUTER_PORT_PROTOCOL_SSH":     22,
		"COMPUTER_PORT_PROTOCOL_TELNET":  23,
		"COMPUTER_PORT_PROTOCOL_SMTP":    25,
		"COMPUTER_PORT_PROTOCOL_DNS":     53,
		"COMPUTER_PORT_PROTOCOL_DHCP":    67,
		"COMPUTER_PORT_PROTOCOL_HTTP":    80,
		"COMPUTER_PORT_PROTOCOL_POP3":    110,
		"COMPUTER_PORT_PROTOCOL_NTP":     123,
		"COMPUTER_PORT_PROTOCOL_IMAP":    143,
		"COMPUTER_PORT_PROTOCOL_SNMP":    161,
		"COMPUTER_PORT_PROTOCOL_HTTPS":   443,
		"COMPUTER_PORT_PROTOCOL_IPSEC":   500,
		"COMPUTER_PORT_PROTOCOL_RADIUS":  1645,
		"COMPUTER_PORT_PROTOCOL_L2TP":    1701,
		"COMPUTER_PORT_PROTOCOL_PPTP":    1723,
		"COMPUTER_PORT_PROTOCOL_RDP":     3389,
	}
)

func (x ComputerPortProtocol) Enum() *ComputerPortProtocol {
	p := new(ComputerPortProtocol)
	*p = x
	return p
}

func (x ComputerPortProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputerPortProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_defines_computer_proto_enumTypes[2].Descriptor()
}

func (ComputerPortProtocol) Type() protoreflect.EnumType {
	return &file_proto_defines_computer_proto_enumTypes[2]
}

func (x ComputerPortProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputerPortProtocol.Descriptor instead.
func (ComputerPortProtocol) EnumDescriptor() ([]byte, []int) {
	return file_proto_defines_computer_proto_rawDescGZIP(), []int{2}
}

type ComputerPortTransport int32

const (
	ComputerPortTransport_COMPUTER_PORT_TRANSPORT_UNKNOWN ComputerPortTransport = 0
	ComputerPortTransport_COMPUTER_PORT_TRANSPORT_TCP     ComputerPortTransport = 1
	ComputerPortTransport_COMPUTER_PORT_TRANSPORT_UDP     ComputerPortTransport = 2
)

// Enum value maps for ComputerPortTransport.
var (
	ComputerPortTransport_name = map[int32]string{
		0: "COMPUTER_PORT_TRANSPORT_UNKNOWN",
		1: "COMPUTER_PORT_TRANSPORT_TCP",
		2: "COMPUTER_PORT_TRANSPORT_UDP",
	}
	ComputerPortTransport_value = map[string]int32{
		"COMPUTER_PORT_TRANSPORT_UNKNOWN": 0,
		"COMPUTER_PORT_TRANSPORT_TCP":     1,
		"COMPUTER_PORT_TRANSPORT_UDP":     2,
	}
)

func (x ComputerPortTransport) Enum() *ComputerPortTransport {
	p := new(ComputerPortTransport)
	*p = x
	return p
}

func (x ComputerPortTransport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputerPortTransport) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_defines_computer_proto_enumTypes[3].Descriptor()
}

func (ComputerPortTransport) Type() protoreflect.EnumType {
	return &file_proto_defines_computer_proto_enumTypes[3]
}

func (x ComputerPortTransport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputerPortTransport.Descriptor instead.
func (ComputerPortTransport) EnumDescriptor() ([]byte, []int) {
	return file_proto_defines_computer_proto_rawDescGZIP(), []int{3}
}

type ComputerPortUseType int32

const (
	ComputerPortUseType_COMPUTER_PORT_USETYPE_NONE   ComputerPortUseType = 0 // 空
	ComputerPortUseType_COMPUTER_PORT_USETYPE_DETECT ComputerPortUseType = 1 // 网络探测
)

// Enum value maps for ComputerPortUseType.
var (
	ComputerPortUseType_name = map[int32]string{
		0: "COMPUTER_PORT_USETYPE_NONE",
		1: "COMPUTER_PORT_USETYPE_DETECT",
	}
	ComputerPortUseType_value = map[string]int32{
		"COMPUTER_PORT_USETYPE_NONE":   0,
		"COMPUTER_PORT_USETYPE_DETECT": 1,
	}
)

func (x ComputerPortUseType) Enum() *ComputerPortUseType {
	p := new(ComputerPortUseType)
	*p = x
	return p
}

func (x ComputerPortUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputerPortUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_defines_computer_proto_enumTypes[4].Descriptor()
}

func (ComputerPortUseType) Type() protoreflect.EnumType {
	return &file_proto_defines_computer_proto_enumTypes[4]
}

func (x ComputerPortUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputerPortUseType.Descriptor instead.
func (ComputerPortUseType) EnumDescriptor() ([]byte, []int) {
	return file_proto_defines_computer_proto_rawDescGZIP(), []int{4}
}

var File_proto_defines_computer_proto protoreflect.FileDescriptor

var file_proto_defines_computer_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x60,
	0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x10, 0x02,
	0x2a, 0x61, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x10, 0x02, 0x2a, 0x9b, 0x05, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x46, 0x54, 0x50, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x14, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x46,
	0x54, 0x50, 0x43, 0x54, 0x4c, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x54, 0x45, 0x4c, 0x4e, 0x45, 0x54, 0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f,
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x4d, 0x54, 0x50, 0x10, 0x19, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x35, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x43, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x50, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x4f, 0x50, 0x33, 0x10, 0x6e, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x54, 0x50, 0x10, 0x7b, 0x12, 0x20,
	0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4d, 0x41, 0x50, 0x10, 0x8f, 0x01,
	0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x10,
	0xa1, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x10, 0xbb, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x49, 0x50, 0x53, 0x45, 0x43, 0x10, 0xf4, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x10, 0xed, 0x0c, 0x12, 0x20, 0x0a, 0x1b,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x10, 0xa5, 0x0d, 0x12, 0x20,
	0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x50, 0x54, 0x50, 0x10, 0xbb, 0x0d,
	0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x44, 0x50, 0x10, 0xbd,
	0x1a, 0x2a, 0x7e, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f,
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x44, 0x50, 0x10,
	0x02, 0x2a, 0x57, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x42, 0x16, 0x5a, 0x14, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_defines_computer_proto_rawDescOnce sync.Once
	file_proto_defines_computer_proto_rawDescData = file_proto_defines_computer_proto_rawDesc
)

func file_proto_defines_computer_proto_rawDescGZIP() []byte {
	file_proto_defines_computer_proto_rawDescOnce.Do(func() {
		file_proto_defines_computer_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_defines_computer_proto_rawDescData)
	})
	return file_proto_defines_computer_proto_rawDescData
}

var file_proto_defines_computer_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_defines_computer_proto_goTypes = []interface{}{
	(ComputerPowerStatus)(0),   // 0: ComputerPowerStatus
	(ComputerOperate)(0),       // 1: ComputerOperate
	(ComputerPortProtocol)(0),  // 2: ComputerPortProtocol
	(ComputerPortTransport)(0), // 3: ComputerPortTransport
	(ComputerPortUseType)(0),   // 4: ComputerPortUseType
}
var file_proto_defines_computer_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_defines_computer_proto_init() }
func file_proto_defines_computer_proto_init() {
	if File_proto_defines_computer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_defines_computer_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_defines_computer_proto_goTypes,
		DependencyIndexes: file_proto_defines_computer_proto_depIdxs,
		EnumInfos:         file_proto_defines_computer_proto_enumTypes,
	}.Build()
	File_proto_defines_computer_proto = out.File
	file_proto_defines_computer_proto_rawDesc = nil
	file_proto_defines_computer_proto_goTypes = nil
	file_proto_defines_computer_proto_depIdxs = nil
}
